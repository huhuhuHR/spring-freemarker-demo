package com.huo.tools;import java.io.*;import java.util.ArrayList;import java.util.Collection;import java.util.List;public class ReplaceStringUnderTarget {    private static final String SOURCE = "${base}";    private static final String TARGET = "http://dev.admin.cnsuning.com:8080/scms-admin";    private static final String JS_FILE = ".js";    private static final String UTF_8 = "UTF-8";    private static final int READ_OVER = -1;    private boolean isBlank(String str) {        return str == null || str.length() == 0 || " ".equals(str);    }    private boolean collectionIsEmpty(Collection collection) {        return collection == null || collection.size() == 0;    }    private <T> boolean arrayIsEmpty(T[] array) {        return array == null || array.length == 0;    }    private boolean fileCanReadAndWrite(File f) {        return f.canRead() && f.canWrite();    }    public void Repace(String codeHourse) {        List<String> list = getTarget(codeHourse);        if (collectionIsEmpty(list)) {            return;        }        String[] paths = new String[list.size()];        list.toArray(paths);        for (String path : paths) {            repeat(new File(path));        }    }    private void repeat(File file) {        if (!file.exists()) {            return;        }        File[] files = file.listFiles();        if (arrayIsEmpty(files)) {            return;        }        String currentName;        for (File f : files) {            if (!fileCanReadAndWrite(f)) {                continue;            }            if (f.isDirectory()) {                repeat(f);                continue;            }            currentName = f.getName();            if (currentName.endsWith(JS_FILE)) {                replaceSpecialStringForFile(f, SOURCE, TARGET);            }        }    }    private void replaceSpecialStringForFile(File file, String sourceStr, String targetStr) {        try {            String str = getFileContentString(file);            if (str.contains(sourceStr)) {                System.out.println("absolutePlace is:" + file.getAbsolutePath());                str = str.replace(sourceStr, targetStr);                fileWriteOut(file, str);            }        } catch (IOException e) {            e.printStackTrace();        }    }    private void fileWriteOut(File file, String str) throws IOException {        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), UTF_8));        writer.write(str.toCharArray());        writer.flush();        writer.close();    }    private String getFileContentString(File file) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), UTF_8));        final int ONE_BYTE = 1024;        char[] data = new char[ONE_BYTE];        StringBuilder sb = new StringBuilder();        int rn;        String str;        while ((rn = br.read(data)) != READ_OVER) {            str = String.valueOf(data, 0, rn);            sb.append(str);        }        br.close();        return sb.toString();    }    private List<String> getTarget(String codeHourse) {        List<String> pathTarget = new ArrayList<String>();        getAllPathUnderPath(codeHourse, pathTarget);        pathTarget = filter(pathTarget);        return pathTarget;    }    private List<String> filter(List<String> paths) {        List<String> result = new ArrayList<String>();        if (collectionIsEmpty(paths)) {            return result;        }        for (String path : paths) {            if (!path.contains("WEB-INF") && !path.contains("\\src\\main\\java") && !path.contains("classes")                    && path.endsWith("target")) {                result.add(path);            }        }        return result;    }    private void getAllPathUnderPath(String hourse, List<String> paths) {        if (isBlank(hourse)) {            return;        }        File file = new File(hourse);        File[] files = file.listFiles();        if (arrayIsEmpty(files)) {            return;        }        String path;        for (File f : files) {            if (f.isDirectory()) {                path = f.getAbsolutePath();                paths.add(path);                getAllPathUnderPath(path, paths);            }        }    }}