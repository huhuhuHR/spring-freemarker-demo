package com.huo.handler;import org.apache.log4j.Logger;import org.springframework.web.socket.CloseStatus;import org.springframework.web.socket.TextMessage;import org.springframework.web.socket.WebSocketSession;import org.springframework.web.socket.handler.TextWebSocketHandler;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class SpringWebSocketHandler extends TextWebSocketHandler {    private static final Map<WebSocketSession, List<String>> socketSession;    private static Logger logger = Logger.getLogger(SpringWebSocketHandler.class);    static {        socketSession = new HashMap<WebSocketSession, List<String>>();    }    public SpringWebSocketHandler() {    }    /**     * 连接成功时候，会触发页面上onopen方法     */    @Override    public void afterConnectionEstablished(WebSocketSession session) throws Exception {//        List pageIdsList = (List) session.getAttributes().get("pageIds");        socketSession.put(session, new ArrayList<>());        logger.debug("connect to the websocket success......当前数量:" + socketSession.size());    }    /**     * 关闭连接时触发     */    @Override    public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception {        logger.debug("websocket connection closed......");        String pageIds = (String) session.getAttributes().get("pageIds");        logger.debug("用户" + pageIds + "已退出！");        socketSession.remove(session);    }    /**     * js调用websocket.send时候，会调用该方法     */    @Override    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {        // super.handleTextMessage(session, message);        sendMessageToSocketWhoHasPageId(new String(message.asBytes()), "huhuhuhr");    }    @Override    public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {        if (session.isOpen()) {            session.close();        }        logger.debug("websocket connection closed......");        socketSession.remove(session);    }    @Override    public boolean supportsPartialMessages() {        return false;    }    /**     * 给含有某种标记的用户发送消息     *     * @param pageId     * @param resultJson     */    public void sendMessageToSocketWhoHasPageId(String pageId, String resultJson) {        TextMessage message = new TextMessage(resultJson.getBytes());        List tmpPageIdList;        WebSocketSession tmpWebSocketSession;        for (Map.Entry<WebSocketSession, List<String>> entry : socketSession.entrySet()) {            tmpPageIdList = entry.getValue();            if (tmpPageIdList.contains(pageId)) {                tmpWebSocketSession = entry.getKey();                try {                    if (tmpWebSocketSession.isOpen()) {                        tmpWebSocketSession.sendMessage(message);                    }                } catch (IOException e) {                    logger.error("SpringWebSocketHandler.sendMessageToSocketWhoHasPageId catch a exception", e);                }            }        }    }}